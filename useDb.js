// @bun
var x=Object.create;var{defineProperty:w,getPrototypeOf:y,getOwnPropertyNames:z}=Object;var B=Object.prototype.hasOwnProperty;var G=(T,f,j)=>{j=T!=null?x(y(T)):{};const h=f||!T||!T.__esModule?w(j,"default",{value:T,enumerable:!0}):j;for(let u of z(T))if(!B.call(h,u))w(h,u,{get:()=>T[u],enumerable:!0});return h};var H=(T,f)=>()=>(f||T((f={exports:{}}).exports,f),f.exports);import{MongoClient as D,ServerApiVersion as E} from"mongodb";import{Container as F} from"typedi";async function P(T=process.env.MONGO_URI||"mongodb://localhost:27017",f=process.env.MONGO_DB||"bunt"){s=new D(T,{serverApi:{version:E.v1,strict:!0}}),await s.connect(),console.log("db connected"),q=s.db(f);const j=await q.listCollections({type:"collection"},{nameOnly:!0}).toArray();for(let h of j)k[h.name]=q.collection(h.name);return s}async function Q(T,f){if(!q)throw new Error("Either client not connected or Database not found");if(!k[T])k[T]=await q.createCollection(T,{validator:f});return F.set(T,k[T]),k[T]}var k={},s=null,q=null;export{q as db,P as connect,s as client,Q as Model};
